name: Publish package in go-pkg

on:
  push:
    branches: [develop]

jobs:
  Release-go-pkg:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@v1
        id: bump
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch
          DRY_RUN: true
          WITH_V: true
          VERBOSE: true

      - name: Get commit messages
        id: commit-message
        run: |
          commit_msg=$(git show-branch --no-name HEAD)
          echo "commit_msg=$commit_msg" >> $GITHUB_OUTPUT
          echo $commit_msg

      - name: Get pull request
        uses: actions-ecosystem/action-get-merged-pull-request@v1.0.1
        id: pull-request
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release note
        id: release-note
        run: |
          COMMIT_MSG="${{ steps.commit-message.outputs.commit_msg }}"
          NOTE="New Version"
          if [[ $COMMIT_MSG == 'feat'* ]]; then
            NOTE="New Features"
          elif [[ $COMMIT_MSG == 'fix'* ]]; then
            NOTE="Bug Fixes"
          elif [[ $COMMIT_MSG == 'chore'* ]]; then
            NOTE="Changes to build process or aux tools"
          elif [[ $COMMIT_MSG == 'revert'* ]]; then
            NOTE="Revert Commits"
          elif [[ $COMMIT_MSG == 'build'* ]]; then
            NOTE="Build"
          elif [[ $COMMIT_MSG == 'docs'* ]]; then
            NOTE="Documentation"
          elif [[ $COMMIT_MSG == 'perf'* ]]; then
            NOTE="Performance Enhancements"
          elif [[ $COMMIT_MSG == 'refactor'* ]]; then
            NOTE="Refactored"
          elif [[ $COMMIT_MSG == 'style'* ]]; then
            NOTE="Changed Style"
          elif [[ $COMMIT_MSG == 'temp'* ]]; then
            NOTE="Temporary Commit"
          elif [[ $COMMIT_MSG == 'test'* ]]; then
            NOTE="Added Tests"
          elif [[ $COMMIT_MSG == 'ci'* ]]; then
            NOTE="Changes to CI config"
          elif [[ $COMMIT_MSG == 'other'* ]]; then
            NOTE="Others"
          fi
          echo $commit_msg
          echo $COMMIT_MSG
          echo $NOTE
          echo "note=<h2>$NOTE</h2>" >> $GITHUB_OUTPUT

          PR_TITLE="#${{ steps.pull-request.outputs.number }}${{ steps.pull-request.outputs.title }}
          echo $PR_TITLE
          echo "pr_title=<h3>$PR_TITLE</h3>" >> $GITHUB_OUTPUT

          PR_BODY="${{ steps.pull-request.outputs.body }}"
          echo $PR_BODY
          echo "pr_body=<h4>$PR_BODY</h4>" >> $GITHUB_OUTPUT

          PR_LABELS="${{ steps.pull-request.outputs.labels }}"
          echo $PR_LABELS
          echo "pr_labels=<h5>$PR_LABELS</h5>" >> $GITHUB_OUTPUT

          PR_ASSIGNEES="${{ steps.pull-request.outputs.assignees }}"
          echo $PR_ASSIGNEES
          echo "pr_assignees=<h5>$PR_ASSIGNEES</h5>" >> $GITHUB_OUTPUT 


      - name: Push tag to GitHub
        id: new-tag
        run: |
          git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git config --global user.name "$GITHUB_ACTOR"
          git config --global push.followTags true
          NEW_TAG=${{ steps.bump.outputs.new_tag }}
          echo "New Tag: $NEW_TAG"
          git tag $NEW_TAG
          git push origin $NEW_TAG
          echo "New bump part: ${{ steps.bump.outputs.part }}"
          echo "$NEW_TAG Tag pushed successfully."
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Publish go-pkg
        run: |
          VERSION=${{ steps.new-tag.outputs.new_tag }}
          echo "New version: $VERSION"
          PKG="github.com/wednesday-solutions/negt@$VERSION"
          echo "New package version: $PKG"
          echo "Release note: ${{ steps.release-note.outputs.note }}"
          GOPROXY=proxy.golang.org go list -m $PKG

      - name: Create Release
        uses: actions/create-release@latest
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump.outputs.new_tag }}
          RELEASE_NAME: ${{ steps.bump.outputs.new_tag }}
          body: |
            ${{ steps.release-note.outputs.note }}
            ${{ steps.release-note.outputs.pr_title }}
            ${{ steps.release-note.outputs.pr_body }}
            ${{ steps.release-note.outputs.pr_labels }}
            ${{ steps.release-note.outputs.pr_assignees }}

            @alichherawalla <br>
            @ijasMohamad
          draft: false
          prerelease: false
          